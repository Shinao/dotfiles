syntax on
filetype indent plugin on
" }}}

" Basic options ----------------------------------------------------------- {{{

let mapleader = ","		" <Leader> key.
set autoread			" Update modified files outside of VIM.
" set textwidth=80		" Character limit.
" set colorcolumn=+1		" Highlight character limit.
set hidden			" Allow buffers to be in the background without saving.
set laststatus=2		" Show status bar.
set cmdheight=2			" Status line height.
set noshowmode			" Hide current mode.
set number			" Show line number.
set showcmd			" Show current command.
"set list 			" Show invisible characters.
set ruler			" Show line and column in status bar.
" set background=dark		"
set t_Co=256			" Use 256 colors.
set scrolloff=999		" Keep the cursor centered in the screen
set showbreak=↪			" The character to put to show a line has been wrapped
set showmatch			" Highlight matching braces
" set matchtime=5			"
" set notimeout			" Timeout on key codes.
set ttimeout
set timeoutlen=1000
set ttimeoutlen=10
set vb t_vb=			" SHUT THE FUCK UP.
set novisualbell		" SHUT THE FUCK UP.
set encoding=utf-8		" Character encoding.
set shortmess=filtIoOA		" Short message.
set report=0			" Report all changes.
set shell=/bin/bash\ --login
" }}}

" Backups ----------------------------------------------------------------- {{{
set backup			" Enable backups for Gundo (AKA Lifesaver).
set undofile			" Save the file.
set noswapfile		" HOW ABOUT FUCK YOU.

set undodir=~/.vim/tmp/undo//		" Undodir
set backupdir=~/.vim/tmp/backup//	" Backupdir.
set directory=~/.vim/tmp/swap//	" Swapfile.

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif
" }}}

" Search ------------------------------------------------------------------ {{{
set hlsearch				" Highlight results
set ignorecase			" Ignore casing of searches
set incsearch				" Start showing results as you type
set smartcase				" Be smart about case sensitivity when searching
set nostartofline			" Don't go back to the start of the line.
set gdefault				" sed is global by default. g to toggle.
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'	" Match git conflict shit.

" Visual search. Stolen from @sjl.
function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction
" }}}

" Tabs -------------------------------------------------------------------- {{{
set autoindent			" Copy indentation for new line.
set smartindent			" Autoindent.
set shiftwidth=2			" Number of spaces for indent.
" }}}

" Wildmenu completion  ----------------------------------------------------{{{

set wildmenu				" Comandline completion.
set wildmode=list:longest,full	" Show a list and match the longest first.

set wildignore+=.hg,.git,.svn		" Version control
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg	" binary images
set wildignore+=*.o,*.out		" compiled object files
set wildignore+=*.spl			" compiled spelling word lists
set wildignore+=*.sw?			" Vim swap files
set wildignore+=*.DS_Store		" OSX bullshit
set whichwrap+=<,>,h,l,[,]		" Wrap chars.
" }}}

" Map --------------------------------------------------------------------- {{{

" Qwerty keyboard.
nnoremap ; :
vnoremap ; :

" Word wrapping.
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" Stay in visual mode when identing.
vnoremap > >gv
vnoremap < <gv

" Stay in middle of window.
" nnoremap n nzzzv
" nnoremap N Nzzzv

noremap <Leader>a ggVG		" Select all file.

" Splits.
nnoremap <silent> ss :split<CR><C-W>j
nnoremap <silent> vv :vsplit<CR><CW>l

nnoremap <silent> // :nohlsearch<CR>	" Remove search highligts.

nnoremap <leader>qq :cclose<CR> 	" Close quickfix window.
nnoremap <Leader><Leader> <C-^>	" Switch to alternate file.

nnoremap <silent> <Leader>w :bp<CR>	" Previous tab. (AZERTY)
nnoremap <silent> <Leader>z :bp<CR>	" Previous tab. (QWERTY)
nnoremap <silent> <Leader>x :bn<CR>	" Next tab.

nnoremap * *<c-o>			" Don't go to next match.

nnoremap <silent> <leader>d :cd %:p:h<cr>	" cd into current file directory.
nnoremap S i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w	" Split current line.

" Magic.
nnoremap / /\v
vnoremap / /\v

" Resize splits.
if bufwinnr(1)
  noremap + <C-W>+
  noremap - <C-W>-
endif

" Move in insert mode.
inoremap <c-d> <c-o>x
inoremap <c-u> <c-o>u
inoremap <c-j> <c-o>j
inoremap <c-k> <c-o>k
inoremap <c-l> <c-o>l
inoremap <c-h> <c-o>h

" Sudo to write
cnoremap w!! w !sudo tee % >/dev/null

" Open help in vertical split.
cnoremap vhelp vert bo help
command! SS set spell!

" Go to tag under cursor.
" Forget that stupid muscle memory shit.
nnoremap <silent>gt :echo "Use <C-]>, stupid."<CR>

" Open tag in right vertical split.
nnoremap <c-\> <c-w>v<c-w><c-l><c-]><c-w><c-h>

" Tabs
nnoremap <Tab> ==
nnoremap T :tabnew<cr>
nnoremap H :tabprev<cr>
nnoremap L :tabnext<cr>
nnoremap ' :tabedit 


" Search for visual block.
vnoremap * :<C-u>call <SID>VSetSearch()<CR>//<CR><c-o>
vnoremap # :<C-u>call <SID>VSetSearch()<CR>??<CR><c-o>

" SHUT THE FUCK UP.
nnoremap Q <NOP>
nnoremap <Space> :set hls!<cr>

" Quick file opening.
nnoremap <leader>lv :tabedit $MYLOCALVIMRC<cr>
nnoremap <leader>gv :tabedit $MYVIMRC<cr>

noremap K {
noremap J }

" <Fx> Maps {{{
" nnoremap <F3> :w<cr>:! clear ; echo '\#use "%";;' \| ocaml<cr>
nnoremap <F3> :w<cr>:! clear ; linux32 ozc -x "%" -o a.out ; linux32 ./a.out<cr>
" nnoremap <F3> :w<cr>:! clear ; sbcl --noinform --load main.lsp<cr>
inoremap <F4> <ESC>:set paste!<CR>i
nnoremap <F4> :set paste!<CR>

" }}}

" tComment {{{
" Comment current line or selection.
map <Leader>c <C-_><C-_>
" }}}

colorscheme badwolf
